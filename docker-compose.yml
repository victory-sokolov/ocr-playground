services:

  appocr:
    container_name: ocrapp
    restart: unless-stopped
    tty: true
    build:
      context: ./ocr-app
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://127.0.0.1:8082/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres-db
      - redis

  redis:
    restart: on-failure
    container_name: redis-ocr
    build:
      context: docker/redis
    security_opt:
      - no-new-privileges:true
    ports:
      - 6389:6389
    networks:
      - ocr-network
    command: redis-server --loglevel warning
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
      - ./data/redis:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf

  nginx:
    image: jonasal/nginx-certbot:latest
    restart: unless-stopped
    container_name: nginx-ocr
    environment:
      - CERTBOT_EMAIL
    env_file:
      - ./docker/nginx/nginx.env
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx_secrets:/etc/letsencrypt

  postgres-db:
    restart: on-failure
    container_name: postgresql-ocr
    build:
      context: docker/postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PGPORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring

volumes:
  pg_data:
  nginx_secrets:

networks:
  ocr-network:
    driver: bridge
