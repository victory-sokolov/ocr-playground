services:

  appocr:
    container_name: ocrapp
    restart: unless-stopped
    tty: true
    build:
      context: ./ocr-app
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    env_file:
      - .env
    ports:
      - "8082:8082"
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "--insecure", "https://localhost:8082/api/v1/health"]
      interval: 20s
      timeout: 10s
      retries: 2
      start_period: 40s
    platform: linux/amd64 # Patch for M1 Mac
    depends_on:
      redis:
        condition: service_started
      postgres-db:
        condition: service_healthy

  redis:
    restart: on-failure
    container_name: redis-ocr
    build:
      context: infrastructure/docker/redis
    security_opt:
      - no-new-privileges:true
    ports:
      - 6389:6379
    networks:
      - ocr-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
      - ./data/redis:/data
      - ./infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf

  rabbitmq:
    image: "bitnami/rabbitmq:3.12.14"
    container_name: rabbitmq-ocr
    ports:
      - "4369:4369"
      - "5672:5672"
      - "25672:25672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/bitnami"

  nginx:
    image: jonasal/nginx-certbot:latest
    restart: unless-stopped
    container_name: nginx-ocr
    environment:
      - CERTBOT_EMAIL
    env_file:
      - ./infrastructure/docker/nginx/nginx.env
    ports:
      - 80:80
      - 443:443
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
    volumes:
      - nginx_secrets:/etc/letsencrypt

  postgres-db:
    restart: on-failure
    container_name: postgresql-ocr
    build:
      context: infrastructure/docker/postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PGPORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  flower:
    image: mher/flower
    container_name: flower
    environment:
      - FLOWER_BASIC_AUTH=user:test
    ports:
      - 5555:5555
    depends_on:
      - rabbitmq
      - redis

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    networks:
      - ocr-network
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/infrastructure/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - 3010:3000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana:/var/lib/grafana

  dozzle:
    container_name: dozzle-ui
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8888:8080

volumes:
  pg_data:
  nginx_secrets:
  grafana_data:
  prometheus_data:
  rabbitmq_data:


networks:
  ocr-network:
    name: ocr-network
    external: true
    driver: bridge
